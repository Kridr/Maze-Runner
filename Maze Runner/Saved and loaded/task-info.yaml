type: edu
custom_name: stage3
files:
- name: src/maze/Main.java
  visible: true
  text: |
    package maze;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/MazeRunnerTest.java
  visible: false
  text: |
    import maze.Main;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.stream.Collectors;

    enum Elem {
        WALL, EMPTY, PATH, DUMMY;

        static Elem get(char c) {
            if (c == '\u2588') {
                return WALL;
            } else if (c == ' ') {
                return EMPTY;
            } else if (c == '/') {
                return PATH;
            } else {
                return null;
            }
        }
    }

    class Maze {

        // maze[height][width]
        // maze[row][col]
        Elem[][] maze;

        Maze(Maze other) {
            maze = new Elem[other.getHeight()][other.getWidth()];
            for (int h = 0; h < other.getHeight(); h++) {
                for (int w = 0; w < other.getWidth(); w++) {
                    maze[h][w] = other.maze[h][w];
                }
            }
        }

        Maze(List<String> lines) throws Exception {

            int lineCount = 1;
            for (String line : lines) {
                if (line.length() % 2 != 0) {
                    throw new Exception("Line " + lineCount + " of the maze " +
                        "contains odd number of characters. Should be always even.");
                }

                for (char c : line.toCharArray()) {
                    if (Elem.get(c) == null) {
                        String hex = Integer.toHexString((int)c);
                        throw new Exception(
                            "Found strange symbol in the " + lineCount +
                                " line of the maze: \\u" + hex);
                    }
                }

                int lineWidth = line.length() / 2;

                for (int currWidth = 0; currWidth < lineWidth; currWidth++) {
                    int currIndex = currWidth * 2;
                    int nextIndex = currIndex + 1;

                    char currChar = line.charAt(currIndex);
                    char nextChar = line.charAt(nextIndex);

                    if (currChar != nextChar) {
                        throw new Exception("There are symbols in " +
                            "this line that don't appear twice in a row " +
                            "(at indexes " + currIndex + " and " + nextIndex + ").\n" +
                            "Line: \"" + line + "\"");
                    }
                }

                lineCount++;
            }

            int mazeWidth = lines.get(0).length() / 2;
            int mazeHeight = lines.size();

            lineCount = 1;
            for (String line : lines) {
                if (line.length() / 2 != mazeWidth) {
                    throw new Exception("The first line of the maze contains " +
                        lines.get(0).length() + " characters, but the line #" +
                        lineCount + " contains " + line.length() + " characters.");
                }
                lineCount++;
            }

            maze = new Elem[mazeHeight][mazeWidth];

            for (int currHeight = 0; currHeight < mazeHeight; currHeight++) {
                String line = lines.get(currHeight);
                for (int currWidth = 0; currWidth < mazeWidth; currWidth++) {
                    char c = line.charAt(currWidth * 2);
                    maze[currHeight][currWidth] = Elem.get(c);
                }
            }

            if (maze[0][0] != Elem.WALL ||
                maze[0][mazeWidth - 1] != Elem.WALL ||
                maze[mazeHeight - 1][0] != Elem.WALL ||
                maze[mazeHeight - 1][mazeWidth - 1] != Elem.WALL) {
                throw new Exception("All four corners of the maze must be walls.");
            }

            for (int h = 0; h <= mazeHeight - 3; h++) {
                for (int w = 0; w <= mazeWidth - 3; w++) {
                    if (getElem(h, w) == Elem.WALL &&
                        getElem(h, w + 1) == Elem.WALL &&
                        getElem(h, w + 2) == Elem.WALL &&

                        getElem(h + 1, w) == Elem.WALL &&
                        getElem(h + 1, w + 1) == Elem.WALL &&
                        getElem(h + 1, w + 2) == Elem.WALL &&

                        getElem(h + 2, w) == Elem.WALL &&
                        getElem(h + 2, w + 1) == Elem.WALL &&
                        getElem(h + 2, w + 2) == Elem.WALL) {

                        throw new Exception("There are 3x3 block in the maze " +
                            "consisting only of walls. Such blocks are not allowed.");
                    }
                }
            }
        }

        Elem[] getRow(int rowNum) {
            Elem[] newRow = new Elem[getWidth()];
            for (int i = 0; i < getWidth(); i++) {
                newRow[i] = maze[rowNum][i];
            }
            return newRow;
        }

        Elem[] getCol(int colNum) {
            Elem[] newCol = new Elem[getHeight()];
            for (int i = 0; i < getHeight(); i++) {
                newCol[i] = maze[i][colNum];
            }
            return newCol;
        }

        Elem getElem(int height, int width) {
            return maze[height][width];
        }

        void setElem(int height, int width, Elem elem) {
            maze[height][width] = elem;
        }

        int getWidth() {
            return maze[0].length;
        }

        int getHeight() {
            return maze.length;
        }

        Maze copy() {
            return new Maze(this);
        }

        int count(Elem toCount) {
            int sum = 0;
            for (Elem[] row : maze) {
                for (Elem e : row) {
                    if (e == toCount) {
                        sum++;
                    }
                }
            }
            return sum;
        }

        int countAround(int h, int w, Elem elem) {
            int sum = 0;

            if (h + 1 < getHeight() &&
                getElem(h + 1, w) == elem) {
                sum++;
            }

            if (h - 1 >= 0 &&
                getElem(h - 1, w) == elem) {
                sum++;
            }

            if (w + 1 < getWidth() &&
                getElem(h, w + 1) == elem) {
                sum++;
            }

            if (w - 1 >= 0 &&
                getElem(h, w - 1) == elem) {
                sum++;
            }

            return sum;
        }

        int countEntrances() {
            int entranceCount = 0;
            for (Elem[] line : new Elem[][] {
                getCol(0),
                getCol(getWidth() - 1),
                getRow(0),
                getRow(getHeight() - 1)
            }) {

                for (Elem e : line) {
                    if (e != Elem.WALL) {
                        entranceCount++;
                    }
                }
            }
            return entranceCount;
        }

        private void propagate(Elem from, Elem to) {
            boolean didPropagate = true;
            while (didPropagate) {
                didPropagate = false;
                for (int h = 0; h < getHeight(); h++) {
                    for (int w = 0; w < getWidth(); w++) {
                        if (getElem(h, w) == from) {
                            if (countAround(h, w, to) > 0) {
                                didPropagate = true;
                                setElem(h, w, to);
                            }
                        }
                    }
                }
            }
        }

        int checkAccessibility() {
            int entranceHeight = 0;
            int entranceWidth = 0;

            findPoints: {
                for (int currWidth : new int[] {0, getWidth() - 1}) {
                    for (int currHeight = 0; currHeight < getHeight(); currHeight++) {
                        if (getElem(currHeight, currWidth) != Elem.WALL) {
                            entranceHeight = currHeight;
                            entranceWidth = currWidth;
                            break findPoints;
                        }
                    }
                }

                for (int currHeight : new int[] {0, getHeight() - 1}) {
                    for (int currWidth = 0; currWidth < getWidth(); currWidth++) {
                        if (getElem(currHeight, currWidth) != Elem.WALL) {
                            entranceHeight = currHeight;
                            entranceWidth = currWidth;
                            break findPoints;
                        }
                    }
                }
            }

            Maze copy = copy();
            copy.setElem(entranceHeight, entranceWidth, Elem.PATH);
            copy.propagate(Elem.EMPTY, Elem.PATH);

            return copy.count(Elem.EMPTY);
        }

        int checkPath() throws Exception {
            int entranceHeight = 0;
            int entranceWidth = 0;

            for (int currWidth : new int[] {0, getWidth() - 1}) {
                for (int currHeight = 0; currHeight < getHeight(); currHeight++) {
                    if (getElem(currHeight, currWidth) == Elem.EMPTY) {
                        throw new Exception("If the maze is solved all " +
                            "the entrances should be marked with '//' characters");
                    }
                    if (getElem(currHeight, currWidth) == Elem.PATH) {
                        entranceHeight = currHeight;
                        entranceWidth = currWidth;
                    }
                }
            }

            for (int currHeight : new int[] {0, getHeight() - 1}) {
                for (int currWidth = 0; currWidth < getWidth(); currWidth++) {
                    if (getElem(currHeight, currWidth) == Elem.EMPTY) {
                        throw new Exception("If the maze is solved all " +
                            "the entrances should be marked with '//' characters");
                    }
                    if (getElem(currHeight, currWidth) == Elem.PATH) {
                        entranceHeight = currHeight;
                        entranceWidth = currWidth;
                    }
                }
            }

            for (int h = 0; h < getHeight(); h++) {
                for (int w = 0; w < getWidth(); w++) {
                    if (getElem(h, w) == Elem.PATH) {
                        if (countAround(h, w, Elem.PATH) >= 3) {
                            throw new Exception("The escape path shouldn't branch off, " +
                                "it should go in one direction.");
                        }
                    }
                }
            }

            Maze copy = copy();
            copy.setElem(entranceHeight, entranceWidth, Elem.DUMMY);
            copy.propagate(Elem.PATH, Elem.DUMMY);

            return copy.count(Elem.PATH);
        }

        boolean equals(Maze other) {
            if (getWidth() != other.getWidth() || getHeight() != other.getHeight()) {
                return false;
            }
            for (int h = 0; h < getHeight(); h++) {
                for (int w = 0; w < getWidth(); w++) {
                    if (getElem(h, w) == Elem.WALL && other.getElem(h, w) != Elem.WALL ||
                        getElem(h, w) != Elem.WALL && other.getElem(h, w) == Elem.WALL) {
                        return false;
                    }
                }
            }
            return true;
        }

        static List<Maze> parse(String text) throws Exception {

            List<Maze> mazes = new ArrayList<>();

            List<String> lines = text
                .lines()
                .collect(Collectors.toList());

            lines.add("");

            List<String> mazeLines = new ArrayList<>();

            boolean isStarted = false;
            for (String line : lines) {
                if (line.contains("\u2588")) {
                    isStarted = true;
                    mazeLines.add(line);
                } else if (isStarted) {
                    isStarted = false;
                    Maze maze = new Maze(mazeLines);
                    mazes.add(maze);
                    mazeLines.clear();
                }
            }

            return mazes;
        }

    }

    class Clue {
        int size;
        Clue(int s) {
            size = s;
        }
    }

    public class MazeRunnerTest extends StageTest<Clue> {

        public MazeRunnerTest() {
            super(Main.class);
        }

        @Override
        public List<TestCase<Clue>> generate() {
            return List.of(
                new TestCase<Clue>()
                    .setInput("0"),

                new TestCase<Clue>()
                    .setInput("1\n17\n0")
                    .setAttach(new Clue(17)),

                new TestCase<Clue>()
                    .setInput("1\n15\n3\ntest_maze.txt\n0")
                    .setAttach(new Clue(15)),

                new TestCase<Clue>()
                    .setInput("2\ntest_maze.txt\n4\n0")
                    .setAttach(new Clue(15))
            );
        }

        @Override
        public CheckResult check(String reply, Clue clue) {

            List<Maze> mazes;
            try {
                mazes = Maze.parse(reply);
            } catch (Exception e) {
                return CheckResult.wrong(
                    e.getMessage()
                );
            }

            if (clue == null && mazes.size() == 0) {
                return CheckResult.correct();
            } else if (clue == null) {
                return CheckResult.wrong(
                    "In this test no maze should be shown, but one was shown. " +
                        "Try to use \\u2588 character only to print the maze."
                );
            } else if (mazes.size() == 0) {
                return CheckResult.wrong(
                    "No mazes found in the output. Check if you are using " +
                        "\\u2588 character to print the maze."
                );
            }

            if (mazes.size() > 1) {
                return CheckResult.wrong(
                    "Found " + mazes.size() + " mazes in the output. " +
                        "Should be only one maze."
                );
            }

            Maze maze = mazes.get(0);

            int entrances = maze.countEntrances();
            if (entrances != 2) {
                return new CheckResult(false,
                    "There are " + entrances + " entrances to the maze, " +
                        "should be only two.");
            }

            int emptyLeft = maze.checkAccessibility();
            if (emptyLeft > 0) {
                return new CheckResult(false,
                    "There are " + emptyLeft + " empty " +
                        "cells that are inaccessible from the entrance of the maze " +
                        "(or there is no way from the entrance to the exit)."
                );
            }

            if (maze.getHeight() != clue.size) {
                return new CheckResult(false,
                    "Number of rows in the maze is incorrect. " +
                        "It's " + maze.getHeight() + ", but should be " + clue.size);
            }

            if (maze.getWidth() != clue.size) {
                return new CheckResult(false,
                    "Number of columns in the maze is incorrect. " +
                        "It's " + maze.getWidth() + ", but should be " + clue.size);
            }

            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/maze/MazeBlock.java
  visible: true
  text: |
    package maze;

    public enum MazeBlock {
        PASS("  "),
        WALL("\u2588\u2588");

        private String block;

        MazeBlock(String block) {
            this.block = block;
        }

        public String getBlock() {
            return block;
        }

    }
  learner_created: true
- name: src/maze/Maze.java
  visible: true
  text: |-
    package maze;
    import java.util.*;

    public class Maze {
        Set<Edge> maze;
        int width;
        int height;
        boolean extraX = false;
        boolean extraY = false;

        public Maze(int w, int h) {
            if (w % 2 == 0) {
                extraX = true;
            }
            if (h % 2 == 0) {
                extraY = true;
            }
            width = (w - 1) / 2;
            height = (h - 1) / 2;
            Set<Edge> fullGraph = fullGridGraph();
            minSpanTree(fullGraph);
            /*for (var e : maze) {
                System.out.println(e.getFirstNode() + " " + e.getSecondNode());
            }*/
        }

        private Set<Edge> fullGridGraph() {
            Random random = new Random();
            Set<Edge> fullGraph = new HashSet<>();

            int non = width * height;

            //main part of the grid
            for (int i = 0; i < width - 1; i++) {
                for (int j = 0; j < height - 1; j++) {
                    int currentNode = Edge.getNumber(i, j, width);
                    int rightNode = Edge.getNumber(i + 1, j, width);
                    int bottomNode = Edge.getNumber(i, j + 1, width);

                    fullGraph.add(new Edge(currentNode, rightNode, random.nextInt(non)));
                    fullGraph.add(new Edge(currentNode, bottomNode, random.nextInt(non)));
                }
            }

            //right part
            for (int i = 0; i < height - 1; i++) {
                int currentNode = Edge.getNumber(width - 1, i, width);
                int bottomNode = Edge.getNumber(width - 1, i + 1, width);

                fullGraph.add(new Edge(currentNode, bottomNode, random.nextInt(non)));
            }

            //bottom
            for (int i = 0; i < width - 1; i++) {
                int currentNode = Edge.getNumber(i, height - 1, width);
                int rightNode = Edge.getNumber(i + 1, height - 1, width);

                fullGraph.add(new Edge(currentNode, rightNode, random.nextInt(non)));
            }

            return fullGraph;
        }

        private void minSpanTree(Set<Edge> fullGraph) {
            Set<Integer> availableNodes = new HashSet<>();
            availableNodes.add(0);
            maze = new HashSet<>();


            while (availableNodes.size() != width * height) {
                int maxVal = 0;
                Edge edge = null;
                for (var e : fullGraph) {
                    if (e.getValue() > maxVal &&
                            (
                                    (availableNodes.contains(e.getFirstNode()))
                                    ^
                                    (availableNodes.contains(e.getSecondNode()))
                            )) {
                        maxVal = e.getValue();
                        edge = e;
                    }
                }

                availableNodes.add(edge.getFirstNode());
                availableNodes.add(edge.getSecondNode());

                maze.add(edge);

                fullGraph.remove(edge);
            }
        }

        @Override
        public String toString() {
            int nWidth = width + (width - 1) + 2;
            int nHeight = height + (height - 1) + 2;
            String[][] mazeGrid = new String[nWidth][nHeight];

            //vertices
            for (int i = 0; i < nWidth; i++) {
                for (int j = 0; j < nHeight; j++) {
                    if (i % 2 == 1 && j % 2 == 1) {
                        mazeGrid[i][j] = MazeBlock.PASS.getBlock();
                    } else {
                        mazeGrid[i][j] = MazeBlock.WALL.getBlock();
                    }
                }
            }

            //edges
            for (var e : maze) {
                int realIF = e.getFirstNode() % width;
                int realJF = e.getFirstNode() / width;
                int iF = realIF * 2 + 1;
                int jF = realJF * 2 + 1;

                int realIS = e.getSecondNode() % width;
                int realJS = e.getSecondNode() / width;
                int iS = realIS * 2 + 1;
                int jS = realJS * 2 + 1;

                int i = (iF + iS) / 2;
                int j = (jF + jS) / 2;

                //System.out.println(e.getFirstNode() + " " + e.getSecondNode());
                //System.out.println(i + " " + j);
                //System.out.println();

                mazeGrid[i][j] = MazeBlock.PASS.getBlock();
            }

            //entrance and exit (top side and bottom size accordingly)
            Random random = new Random();
            int iEn = 0;
            int jEn = random.nextInt(height) * 2 + 1;
            mazeGrid[iEn][jEn] = MazeBlock.PASS.getBlock();

            int iEx = mazeGrid.length - 1;
            int jEx = mazeGrid[0].length - jEn - 1;
            mazeGrid[iEx][jEx] = MazeBlock.PASS.getBlock();

            StringBuilder s = new StringBuilder();

            for (int i = 0; i < nWidth; i++) {
                for (int j = 0; j < nHeight; j++) {
                    s.append(mazeGrid[i][j]);
                }
                if (extraY) {
                    s.append(mazeGrid[nWidth - 1][nHeight - 1]);
                }
                s.append("\n");
                if (extraX) {
                    s.append(s);
                    extraX = false;
                }
            }

            return s.toString();
        }
    }
  learner_created: true
- name: src/maze/Wicked.java
  visible: true
  learner_created: true
- name: src/maze/Pair.java
  visible: true
  text: |
    package maze;

    public class Edge {
        //number of first and second nodes
        private int firstNode;
        private int secondNode;
        private int value;

        public Edge(int firstNode, int secondNode, int value) {
            this.firstNode = firstNode;
            this.secondNode = secondNode;
            this.value = value;
        }

        public static int getNumber(int i, int j, int w) {
            return i + j * w;
        }

        public int getFirstNode() {
            return firstNode;
        }

        public int getSecondNode() {
            return secondNode;
        }

        public int getValue() {
            return value;
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/47/stages/253/implement
status: Failed
feedback:
  message: "Exception in test #1\n\nProbably your program run out of input (Scanner\
    \ tried to read more than expected).\n\njava.util.NoSuchElementException\r\n\t\
    at java.base/java.util.Scanner.throwFor(Scanner.java:937)\r\n\tat java.base/java.util.Scanner.next(Scanner.java:1594)\r\
    \n\tat java.base/java.util.Scanner.nextInt(Scanner.java:2258)\r\n\tat java.base/java.util.Scanner.nextInt(Scanner.java:2212)\r\
    \n\tat maze.Main.main(Main.java:11)\n\nPlease find below the output of your program\
    \ during this failed test.\nNote that the &#39;&gt;&#39; character indicates the\
    \ beginning of the input line.\n\n---\n\nPlease, enter the size of a maze\n&gt;\
    \ 0"
  time: Fri, 01 Jan 2021 13:06:09 UTC
record: -1
